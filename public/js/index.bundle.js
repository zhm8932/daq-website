webpackJsonp([8],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(124);
	module.exports = __webpack_require__(7);


/***/ },

/***/ 124:
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    // require('lazyload');
	    //     require('touchslider');
	    var utils = __webpack_require__(4)
	    __webpack_require__(125);
	    __webpack_require__(126);

	    $('#sliderBox').movingBoxes({
	        startPanel   : 2,       // 从第一个li开始
	        reducedSize  : .6,      // 缩小到原图50%的尺寸
	        wrap         : true,   // 无缝循环
	        buildNav     : true,	// 显示指示器效果
	        navFormatter : function(){ return "&#9679;"; }  // 指示器格式，为空即会显示123

	    });

	    function initTouchSlider(obj) {
	        // $(".slideBox").touchSlider({
	        //     container: this,
	        //     duration: 350, // 动画速度
	        //     delay: 3000, // 动画时间间隔
	        //     margin: 5,
	        //     mouseTouch: true,
	        //     namespace: "touchslider",
	        //     next: ".next", // next 样式指定
	        //     pagination: ".tit span",
	        //     // heightType:true,
	        //     currentClass: "on", // current 样式指定
	        //     prev: ".prev", // prev 样式指定
	        //     // scroller: viewport.children(),
	        //     autoplay: false, // 自动播放
	        //     bResize:true,
	        //     // viewport: ".touchslider-viewport"  //内容区域
	        //     viewport: ".bd"  //内容区域
	        // });

	        $('.slideBox').slidesjs({
	            width: obj.width,
	            height: obj.height,
	            navigation: false,
	            play: {
	                active: false,
	                auto: true,
	                interval: 6000,
	                swap: true
	            },
	            effect: {
	                slide: {
	                    speed: 1000
	                }
	            }

	        });
	    }

	    if(utils.browser.mobile){
	        initTouchSlider({
	            width: 720,
	            height: 420
	        });
	    }else{
	        initTouchSlider({
	            width: 1600,
	            height: 634
	        });
	    }


	}());



/***/ },

/***/ 125:
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.6.1
	(function() {

	  (function($, window, document) {
	    var Plugin, defaults, pluginName;
	    pluginName = "slidesjs";
	    defaults = {
	      width: 940,
	      height: 528,
	      start: 1,
	      navigation: {
	        active: true,
	        effect: "slide"
	      },
	      pagination: {
	        active: true,
	        effect: "slide"
	      },
	      play: {
	        active: false,
	        effect: "slide",
	        interval: 5000,
	        auto: false,
	        swap: true,
	        pauseOnHover: false,
	        restartDelay: 2500
	      },
	      effect: {
	        slide: {
	          speed: 500
	        },
	        fade: {
	          speed: 300,
	          crossfade: true
	        }
	      },
	      callback: {
	        loaded: function() {},
	        start: function() {},
	        complete: function() {}
	      }
	    };
	    Plugin = (function() {

	      function Plugin(element, options) {
	        this.element = element;
	        this.options = $.extend(true, {}, defaults, options);
	        this._defaults = defaults;
	        this._name = pluginName;
	        this.init();
	      }

	      return Plugin;

	    })();
	    Plugin.prototype.init = function() {
	      var $element, nextButton, pagination, playButton, prevButton, stopButton,
	        _this = this;
	      $element = $(this.element);
	      this.data = $.data(this);
	      $.data(this, "animating", false);
	      $.data(this, "total", $element.children().not(".slidesjs-navigation", $element).length);
	      $.data(this, "current", this.options.start - 1);
	      $.data(this, "vendorPrefix", this._getVendorPrefix());
	      if (typeof TouchEvent !== "undefined") {
	        $.data(this, "touch", true);
	        this.options.effect.slide.speed = this.options.effect.slide.speed / 2;
	      }
	      $element.css({
	        overflow: "hidden"
	      });
	      $element.slidesContainer = $element.children().not(".slidesjs-navigation", $element).wrapAll("<div class='slidesjs-container'>", $element).parent().css({
	        overflow: "hidden",
	        position: "relative"
	      });
	      $(".slidesjs-container", $element).wrapInner("<div class='slidesjs-control'>", $element).children();
	      $(".slidesjs-control", $element).css({
	        position: "relative",
	        left: 0
	      });
	      $(".slidesjs-control", $element).children().addClass("slidesjs-slide").css({
	        position: "absolute",
	        top: 0,
	        left: 0,
	        width: "100%",
	        zIndex: 0,
	        display: "none",
	        webkitBackfaceVisibility: "hidden"
	      });
	      var winW = $(window).width();
	      console.log("winW:",winW)
	      $.each($(".slidesjs-control", $element).children(), function(i) {
	        var $slide;
	        $slide = $(this);
	        var width = $slide.children().width();


	        console.log("$slide:",$slide)
	        console.log("$slide.children():",$slide.children())
	        console.log("$slide.width():",$slide.width())
	        console.log("$slide.children().width():",$slide.children().width())
	        if(width>winW){
	          $slide.children().css({
	            "margin-left":(winW-width)/2
	          })
	        }

	        return $slide.attr("slidesjs-index", i).addClass('slide_'+i);
	      });
	      if (this.data.touch) {
	        $(".slidesjs-control", $element).on("touchstart", function(e) {
	          return _this._touchstart(e);
	        });
	        $(".slidesjs-control", $element).on("touchmove", function(e) {
	          return _this._touchmove(e);
	        });
	        $(".slidesjs-control", $element).on("touchend", function(e) {
	          return _this._touchend(e);
	        });
	      }
	      $element.fadeIn(0);
	      this.update();
	      if (this.data.touch) {
	        this._setuptouch();
	      }
	      $(".slidesjs-control", $element).children(":eq(" + this.data.current + ")").eq(0).fadeIn(0, function() {
	        return $(this).css({
	          zIndex: 10
	        });
	      });
	      if (this.options.navigation.active) {
	        prevButton = $("<a>", {
	          "class": "slidesjs-previous slidesjs-navigation",
	          href: "#",
	          title: "Previous",
	          text: "Previous"
	        }).appendTo($element);
	        nextButton = $("<a>", {
	          "class": "slidesjs-next slidesjs-navigation",
	          href: "#",
	          title: "Next",
	          text: "Next"
	        }).appendTo($element);
	      }
	      $(".slidesjs-next", $element).click(function(e) {
	        e.preventDefault();
	        _this.stop(true);
	        return _this.next(_this.options.navigation.effect);
	      });
	      $(".slidesjs-previous", $element).click(function(e) {
	        e.preventDefault();
	        _this.stop(true);
	        return _this.previous(_this.options.navigation.effect);
	      });
	      if (this.options.play.active) {
	        playButton = $("<a>", {
	          "class": "slidesjs-play slidesjs-navigation",
	          href: "#",
	          title: "Play",
	          text: "Play"
	        }).appendTo($element);
	        stopButton = $("<a>", {
	          "class": "slidesjs-stop slidesjs-navigation",
	          href: "#",
	          title: "Stop",
	          text: "Stop"
	        }).appendTo($element);
	        playButton.click(function(e) {
	          e.preventDefault();
	          return _this.play(true);
	        });
	        stopButton.click(function(e) {
	          e.preventDefault();
	          return _this.stop(true);
	        });
	        if (this.options.play.swap) {
	          stopButton.css({
	            display: "none"
	          });
	        }
	      }
	      if (this.options.pagination.active) {
	        pagination = $("<ul>", {
	          "class": "slidesjs-pagination"
	        }).appendTo($element);
	        $.each(new Array(this.data.total), function(i) {
	          var paginationItem, paginationLink;
	          paginationItem = $("<li>", {
	            "class": "slidesjs-pagination-item"
	          }).appendTo(pagination);
	          paginationLink = $("<a>", {
	            href: "#",
	            "data-slidesjs-item": i,
	            html: i + 1
	          }).appendTo(paginationItem);
	          return paginationLink.click(function(e) {
	            e.preventDefault();
	            _this.stop(true);
	            return _this.goto(($(e.currentTarget).attr("data-slidesjs-item") * 1) + 1);
	          });
	        });
	      }
	      $(window).bind("resize", function() {
	        return _this.update();
	      });
	      this._setActive();
	      if (this.options.play.auto) {
	        this.play();
	      }
	      return this.options.callback.loaded(this.options.start);
	    };
	    Plugin.prototype._setActive = function(number) {
	      var $element, current;
	      $element = $(this.element);
	      this.data = $.data(this);
	      current = number > -1 ? number : this.data.current;
	      $(".active", $element).removeClass("active");
	      return $(".slidesjs-pagination li:eq(" + current + ") a", $element).addClass("active");
	    };
	    Plugin.prototype.update = function() {
	      var $element, height, width;
	      $element = $(this.element);
	      this.data = $.data(this);

	      var winW = $(window).width();
	      console.log("winW:",winW)
	      $.each($(".slidesjs-control", $element).children(), function(i) {
	        var $slide;
	        $slide = $(this);
	        var width = $slide.children().width();


	        console.log("$slide:",$slide)
	        console.log("$slide.children():",$slide.children())
	        console.log("$slide.width():",$slide.width())
	        console.log("$slide.children().width():",$slide.children().width())
	        if(width>winW){
	          $slide.children().css({
	            "margin-left":(winW-width)/2
	          })
	        }

	        return $slide.attr("slidesjs-index", i);
	      });

	      $(".slidesjs-control", $element).children(":not(:eq(" + this.data.current + "))").css({
	        display: "none",
	        left: 0,
	        zIndex: 0
	      });
	      width = $element.width();
	      height = $element.find('.slidesjs-slide').height();

	      // height = (this.options.height / this.options.width) * width;

	      // console.log("width:",width)
	      // console.log("height:",height)
	      // console.log("height:",$element)
	      this.options.width = width;
	      this.options.height = height;
	      this.options.height = height;
	      return $(".slidesjs-control, .slidesjs-container", $element).css({
	        width: width,
	        height: height
	      });
	    };
	    Plugin.prototype.next = function(effect) {
	      var $element;
	      $element = $(this.element);
	      this.data = $.data(this);
	      $.data(this, "direction", "next");
	      if (effect === void 0) {
	        effect = this.options.navigation.effect;
	      }
	      if (effect === "fade") {
	        return this._fade();
	      } else {
	        return this._slide();
	      }
	    };
	    Plugin.prototype.previous = function(effect) {
	      var $element;
	      $element = $(this.element);
	      this.data = $.data(this);
	      $.data(this, "direction", "previous");
	      if (effect === void 0) {
	        effect = this.options.navigation.effect;
	      }
	      if (effect === "fade") {
	        return this._fade();
	      } else {
	        return this._slide();
	      }
	    };
	    Plugin.prototype.goto = function(number) {
	      var $element, effect;
	      $element = $(this.element);
	      this.data = $.data(this);
	      if (effect === void 0) {
	        effect = this.options.pagination.effect;
	      }
	      if (number > this.data.total) {
	        number = this.data.total;
	      } else if (number < 1) {
	        number = 1;
	      }
	      if (typeof number === "number") {
	        if (effect === "fade") {
	          return this._fade(number);
	        } else {
	          return this._slide(number);
	        }
	      } else if (typeof number === "string") {
	        if (number === "first") {
	          if (effect === "fade") {
	            return this._fade(0);
	          } else {
	            return this._slide(0);
	          }
	        } else if (number === "last") {
	          if (effect === "fade") {
	            return this._fade(this.data.total);
	          } else {
	            return this._slide(this.data.total);
	          }
	        }
	      }
	    };
	    Plugin.prototype._setuptouch = function() {
	      var $element, next, previous, slidesControl;
	      $element = $(this.element);
	      this.data = $.data(this);
	      slidesControl = $(".slidesjs-control", $element);
	      next = this.data.current + 1;
	      previous = this.data.current - 1;
	      if (previous < 0) {
	        previous = this.data.total - 1;
	      }
	      if (next > this.data.total - 1) {
	        next = 0;
	      }
	      slidesControl.children(":eq(" + next + ")").css({
	        display: "block",
	        left: this.options.width
	      });
	      return slidesControl.children(":eq(" + previous + ")").css({
	        display: "block",
	        left: -this.options.width
	      });
	    };
	    Plugin.prototype._touchstart = function(e) {
	      var $element, touches;
	      $element = $(this.element);
	      this.data = $.data(this);
	      touches = e.originalEvent.touches[0];
	      this._setuptouch();
	      $.data(this, "touchtimer", Number(new Date()));
	      $.data(this, "touchstartx", touches.pageX);
	      $.data(this, "touchstarty", touches.pageY);
	      return e.stopPropagation();
	    };
	    Plugin.prototype._touchend = function(e) {
	      var $element, duration, prefix, slidesControl, timing, touches, transform,
	        _this = this;
	      $element = $(this.element);
	      this.data = $.data(this);
	      touches = e.originalEvent.touches[0];
	      slidesControl = $(".slidesjs-control", $element);
	      if (slidesControl.position().left > this.options.width * 0.5 || slidesControl.position().left > this.options.width * 0.1 && (Number(new Date()) - this.data.touchtimer < 250)) {
	        $.data(this, "direction", "previous");
	        this._slide();
	      } else if (slidesControl.position().left < -(this.options.width * 0.5) || slidesControl.position().left < -(this.options.width * 0.1) && (Number(new Date()) - this.data.touchtimer < 250)) {
	        $.data(this, "direction", "next");
	        this._slide();
	      } else {
	        prefix = this.data.vendorPrefix;
	        transform = prefix + "Transform";
	        duration = prefix + "TransitionDuration";
	        timing = prefix + "TransitionTimingFunction";
	        slidesControl[0].style[transform] = "translateX(0px)";
	        slidesControl[0].style[duration] = this.options.effect.slide.speed * 0.85 + "ms";
	      }
	      slidesControl.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function() {
	        prefix = _this.data.vendorPrefix;
	        transform = prefix + "Transform";
	        duration = prefix + "TransitionDuration";
	        timing = prefix + "TransitionTimingFunction";
	        slidesControl[0].style[transform] = "";
	        slidesControl[0].style[duration] = "";
	        return slidesControl[0].style[timing] = "";
	      });
	      return e.stopPropagation();
	    };
	    Plugin.prototype._touchmove = function(e) {
	      var $element, prefix, slidesControl, touches, transform;
	      $element = $(this.element);
	      this.data = $.data(this);
	      touches = e.originalEvent.touches[0];
	      prefix = this.data.vendorPrefix;
	      slidesControl = $(".slidesjs-control", $element);
	      transform = prefix + "Transform";
	      $.data(this, "scrolling", Math.abs(touches.pageX - this.data.touchstartx) < Math.abs(touches.pageY - this.data.touchstarty));
	      if (!this.data.animating && !this.data.scrolling) {
	        e.preventDefault();
	        this._setuptouch();
	        slidesControl[0].style[transform] = "translateX(" + (touches.pageX - this.data.touchstartx) + "px)";
	      }
	      return e.stopPropagation();
	    };
	    Plugin.prototype.play = function(next) {
	      var $element, currentSlide, slidesContainer,
	        _this = this;
	      $element = $(this.element);
	      this.data = $.data(this);
	      if (!this.data.playInterval) {
	        if (next) {
	          currentSlide = this.data.current;
	          this.data.direction = "next";
	          if (this.options.play.effect === "fade") {
	            this._fade();
	          } else {
	            this._slide();
	          }
	        }
	        $.data(this, "playInterval", setInterval((function() {
	          currentSlide = _this.data.current;
	          _this.data.direction = "next";
	          if (_this.options.play.effect === "fade") {
	            return _this._fade();
	          } else {
	            return _this._slide();
	          }
	        }), this.options.play.interval));
	        slidesContainer = $(".slidesjs-container", $element);
	        if (this.options.play.pauseOnHover) {
	          slidesContainer.unbind();
	          slidesContainer.bind("mouseenter", function() {
	            return _this.stop();
	          });
	          slidesContainer.bind("mouseleave", function() {
	            if (_this.options.play.restartDelay) {
	              return $.data(_this, "restartDelay", setTimeout((function() {
	                return _this.play(true);
	              }), _this.options.play.restartDelay));
	            } else {
	              return _this.play();
	            }
	          });
	        }
	        $.data(this, "playing", true);
	        $(".slidesjs-play", $element).addClass("slidesjs-playing");
	        if (this.options.play.swap) {
	          $(".slidesjs-play", $element).hide();
	          return $(".slidesjs-stop", $element).show();
	        }
	      }
	    };
	    Plugin.prototype.stop = function(clicked) {
	      var $element;
	      $element = $(this.element);
	      this.data = $.data(this);
	      clearInterval(this.data.playInterval);
	      if (this.options.play.pauseOnHover && clicked) {
	        $(".slidesjs-container", $element).unbind();
	      }
	      $.data(this, "playInterval", null);
	      $.data(this, "playing", false);
	      $(".slidesjs-play", $element).removeClass("slidesjs-playing");
	      if (this.options.play.swap) {
	        $(".slidesjs-stop", $element).hide();
	        return $(".slidesjs-play", $element).show();
	      }
	    };
	    Plugin.prototype._slide = function(number) {
	      var $element, currentSlide, direction, duration, next, prefix, slidesControl, timing, transform, value,
	        _this = this;
	      $element = $(this.element);
	      this.data = $.data(this);
	      if (!this.data.animating && number !== this.data.current + 1) {
	        $.data(this, "animating", true);
	        currentSlide = this.data.current;
	        if (number > -1) {
	          number = number - 1;
	          value = number > currentSlide ? 1 : -1;
	          direction = number > currentSlide ? -this.options.width : this.options.width;
	          next = number;
	        } else {
	          value = this.data.direction === "next" ? 1 : -1;
	          direction = this.data.direction === "next" ? -this.options.width : this.options.width;
	          next = currentSlide + value;
	        }
	        if (next === -1) {
	          next = this.data.total - 1;
	        }
	        if (next === this.data.total) {
	          next = 0;
	        }
	        this._setActive(next);
	        slidesControl = $(".slidesjs-control", $element);
	        if (number > -1) {
	          slidesControl.children(":not(:eq(" + currentSlide + "))").css({
	            display: "none",
	            left: 0,
	            zIndex: 0
	          });
	        }
	        slidesControl.children(":eq(" + next + ")").css({
	          display: "block",
	          left: value * this.options.width,
	          zIndex: 10
	        });
	        this.options.callback.start(currentSlide + 1);
	        if (this.data.vendorPrefix) {
	          prefix = this.data.vendorPrefix;
	          transform = prefix + "Transform";
	          duration = prefix + "TransitionDuration";
	          timing = prefix + "TransitionTimingFunction";
	          slidesControl[0].style[transform] = "translateX(" + direction + "px)";
	          slidesControl[0].style[duration] = this.options.effect.slide.speed + "ms";
	          return slidesControl.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function() {
	            slidesControl[0].style[transform] = "";
	            slidesControl[0].style[duration] = "";
	            slidesControl.children(":eq(" + next + ")").css({
	              left: 0
	            });
	            slidesControl.children(":eq(" + currentSlide + ")").css({
	              display: "none",
	              left: 0,
	              zIndex: 0
	            });
	            $.data(_this, "current", next);
	            $.data(_this, "animating", false);
	            slidesControl.unbind("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd");
	            slidesControl.children(":not(:eq(" + next + "))").css({
	              display: "none",
	              left: 0,
	              zIndex: 0
	            });
	            if (_this.data.touch) {
	              _this._setuptouch();
	            }
	            return _this.options.callback.complete(next + 1);
	          });
	        } else {
	          return slidesControl.stop().animate({
	            left: direction
	          }, this.options.effect.slide.speed, (function() {
	            slidesControl.css({
	              left: 0
	            });
	            slidesControl.children(":eq(" + next + ")").css({
	              left: 0
	            });
	            return slidesControl.children(":eq(" + currentSlide + ")").css({
	              display: "none",
	              left: 0,
	              zIndex: 0
	            }, $.data(_this, "current", next), $.data(_this, "animating", false), _this.options.callback.complete(next + 1));
	          }));
	        }
	      }
	    };
	    Plugin.prototype._fade = function(number) {
	      var $element, currentSlide, next, slidesControl, value,
	        _this = this;
	      $element = $(this.element);
	      this.data = $.data(this);
	      if (!this.data.animating && number !== this.data.current + 1) {
	        $.data(this, "animating", true);
	        currentSlide = this.data.current;
	        if (number) {
	          number = number - 1;
	          value = number > currentSlide ? 1 : -1;
	          next = number;
	        } else {
	          value = this.data.direction === "next" ? 1 : -1;
	          next = currentSlide + value;
	        }
	        if (next === -1) {
	          next = this.data.total - 1;
	        }
	        if (next === this.data.total) {
	          next = 0;
	        }
	        this._setActive(next);
	        slidesControl = $(".slidesjs-control", $element);
	        slidesControl.children(":eq(" + next + ")").css({
	          display: "none",
	          left: 0,
	          zIndex: 10
	        });
	        this.options.callback.start(currentSlide + 1);
	        if (this.options.effect.fade.crossfade) {
	          slidesControl.children(":eq(" + this.data.current + ")").stop().fadeOut(this.options.effect.fade.speed);
	          return slidesControl.children(":eq(" + next + ")").stop().fadeIn(this.options.effect.fade.speed, (function() {
	            slidesControl.children(":eq(" + next + ")").css({
	              zIndex: 0
	            });
	            $.data(_this, "animating", false);
	            $.data(_this, "current", next);
	            return _this.options.callback.complete(next + 1);
	          }));
	        } else {
	          return slidesControl.children(":eq(" + currentSlide + ")").stop().fadeOut(this.options.effect.fade.speed, (function() {
	            slidesControl.children(":eq(" + next + ")").stop().fadeIn(_this.options.effect.fade.speed, (function() {
	              return slidesControl.children(":eq(" + next + ")").css({
	                zIndex: 10
	              });
	            }));
	            $.data(_this, "animating", false);
	            $.data(_this, "current", next);
	            return _this.options.callback.complete(next + 1);
	          }));
	        }
	      }
	    };
	    Plugin.prototype._getVendorPrefix = function() {
	      var body, i, style, transition, vendor;
	      body = document.body || document.documentElement;
	      style = body.style;
	      transition = "transition";
	      vendor = ["Moz", "Webkit", "Khtml", "O", "ms"];
	      transition = transition.charAt(0).toUpperCase() + transition.substr(1);
	      i = 0;
	      while (i < vendor.length) {
	        if (typeof style[vendor[i] + transition] === "string") {
	          return vendor[i];
	        }
	        i++;
	      }
	      return false;
	    };
	    return $.fn[pluginName] = function(options) {
	      return this.each(function() {
	        if (!$.data(this, "plugin_" + pluginName)) {
	          return $.data(this, "plugin_" + pluginName, new Plugin(this, options));
	        }
	      });
	    };
	  })(jQuery, window, document);

	}).call(this);


/***/ },

/***/ 126:
/***/ function(module, exports) {

	/*!
	 * Moving Boxes v2.3.4
	 * by Chris Coyier
	 * http://css-tricks.com/moving-boxes/
	 */
	/*jshint browser:true, jquery:true */
	;(function($){
		"use strict";
		$.movingBoxes = function(el, options){
			// To avoid scope issues, use 'base' instead of 'this'
			// to reference this class from internal events and functions.
			var o, base = this;

			// Access to jQuery and DOM versions of element
			base.$el = $(el).addClass('mb-slider');
			base.el = el;

			// Add a reverse reference to the DOM object
			base.$el.data('movingBoxes', base);

			base.init = function(){
				base.options = o = $.extend({}, $.movingBoxes.defaultOptions, options);

				// Setup formatting (to reduce the amount of initial HTML)
				base.$el.wrap('<div class="movingBoxes mb-wrapper"><div class="mb-scroll" /></div>');

				// defaults
				base.$window = base.$el.parent(); // mb-scroll
				base.$wrap = base.$window.parent() // mb-wrapper
					.prepend('<a class="mb-scrollButtons mb-left"></a>')
					.append('<a class="mb-scrollButtons mb-right"></a><div class="mb-left-shadow"></div><div class="mb-right-shadow"></div>');

				base.$panels = base.$el.children().addClass('mb-panel');
				base.runTime = $('.mb-slider').index(base.$el) + 1; // Get index (run time) of this slider on the page
				base.regex = new RegExp('slider' + base.runTime + '=(\\d+)', 'i'); // hash tag regex

				base.initialized = false;
				base.currentlyMoving = false;
				base.curPanel = (o.initAnimation) ? 1 : base.getHash() || o.startPanel;
				// save original slider width
				base.width = (o.width) ? parseInt(o.width,10) : base.$el.width();
				// save panel width, o.panelWidth originally a fraction (0.5 of o.width) if defined, or get first panel width
				// now can be set after initialization to resize using fraction (value <= 2) or px (all values > 2)
				base.pWidth = (o.panelWidth) ? (o.panelWidth <=2 ? o.panelWidth * base.width : o.panelWidth) : base.$panels.eq(0).width();

				// Set up click on left/right arrows
				base.$left = base.$wrap.find('.mb-left').click(function(){
					base.goBack();
					return false;
				});
				base.$right = base.$wrap.find('.mb-right').click(function(){
					base.goForward();
					return false;
				});
				// code to run to update MovingBoxes when the number of panels change
				base.update({}, false);
				// make sure current panel is centered
				base.setWrap(base.curPanel);
				// go to clicked panel
				base.$el.delegate('.mb-panel', 'click', function(e){
					if (!$(this).hasClass(o.currentPanel)) {
						e.preventDefault();  // prevent non-current panel links from working
						base.change( base.$panels.index($(this)) + base.adj, {}, true );
					}
				});

				// Activate moving box on click or when an internal link obtains focus
				base.$wrap.click(function(){
					if (!base.$wrap.hasClass('mb-active-slider')) {
						base.active();
					}
				});
				base.$panels.delegate('a', 'focus' ,function(e){
					e.preventDefault();
					// focused link centered in moving box
					var loc = base.$panels.index($(this).closest('.mb-panel')) + base.adj;
					if (loc !== base.curPanel){
						base.change( loc, {}, true );
					}
				});

				// Add keyboard navigation
				$(document).keyup(function(e){
					// ignore arrow/space keys if inside a form element
					if (e.target.tagName.match('TEXTAREA|INPUT|SELECT')) { return; }
					switch (e.which) {
						case 39: case 32: // right arrow & space
						if (base.$wrap.is('.mb-active-slider')){
							base.goForward();
						}
						break;
						case 37: // left arrow
							if (base.$wrap.is('.mb-active-slider')){
								base.goBack();
							}
							break;
					}
				});

				// Bind Events
				$.each('preinit initialized initChange beforeAnimation completed'.split(' '), function(i,evt){
					if ($.isFunction(o[evt])){
						base.$el.bind(evt + '.movingBoxes', o[evt]);
					}
				});

				base.$el.trigger( 'preinit.movingBoxes', [ base, base.curPanel ] );

			};

			// update the panel, flag is used to prevent events from firing
			base.update = function(callback, flag){

				// Infinite loop
				base.$el.children('.cloned').remove();
				base.$panels = base.$el.children();
				base.adj = (o.wrap && base.$panels.length > 1) ? 0 : 1; // count adjustment for infinite panels

				base.width = (o.width) ? parseInt(o.width,10) : base.width;
				base.$wrap.css('width', base.width); // set wrapper width

				if (o.wrap && base.$panels.length > 1) {
					base.$el.prepend( base.$panels.filter(':last').clone().addClass('cloned') );
					base.$el.append( base.$panels.filter(':first').clone().addClass('cloned') );
					base.$el.find('.cloned').each(function(){
						// disable all focusable elements in cloned panels to prevent shifting the panels by tabbing
						$(this).find('a,input,textarea,select,button,area').removeAttr('name').attr('disabled', 'disabled');
						$(this).find('[id]').andSelf().removeAttr('id');
					});
				}

				// Set up panes & content sizes
				// defined $panels again to include cloned panels
				base.$panels = base.$el.children()
					.addClass('mb-panel')
					// inner wrap of each panel
					.each(function(){
						if ($(this).find('.mb-inside').length === 0) {
							$(this).wrapInner('<div class="mb-inside" />');
						}
					});
				base.totalPanels = base.$panels.filter(':not(.cloned)').length; // don't include cloned panels in total
				// in case current panel no longer exists
				if (base.totalPanels <= 1) { base.curPanel = 1; }

				base.setSizes(flag);

				base.buildNav();

				base.change(base.curPanel, callback, flag); // initialize from first panel... then scroll to start panel

				// check panel height after all images load
				base.imagesLoaded(function(){
					base.setSizes(false);
					base.setWrap(base.curPanel);

					// animate to chosen start panel - starting from the first panel makes it look better
					if (!base.initialized){
						setTimeout(function(){
							base.initialized = true;
							base.change(base.getHash() || o.startPanel, {}, false);
							base.$el.trigger( 'initialized.movingBoxes', [ base, base.curPanel ] );
						}, o.speed * 2 );
					}

				});

			};

			base.setSizes = function(flag){
				// include padding & margins around the panels
				base.padding = parseInt(base.$panels.css('padding-left'), 10) + parseInt(base.$panels.css('margin-left'), 10);

				// save 'cur' numbers (current larger panel size), use stored sizes if they exist
				base.curWidth = (o.panelWidth) ? (o.panelWidth <=2 ? o.panelWidth * base.width : o.panelWidth) : base.pWidth;
				// save 'reg' (reduced size) numbers
				base.regWidth = base.curWidth * o.reducedSize;
				// set image heights so base container height is correctly set
				base.$panels.css({ width: base.curWidth, fontSize: '1em' }); // make all panels big
				// save each panel height... script will resize container as needed
				// make sure current panel css is applied before measuring
				base.$panels.eq(base.curPanel - base.adj).addClass(o.currentPanel);
				base.heights = base.$panels.css('height','auto').map(function(i,e){ return $(e).outerHeight(true); }).get();

				base.returnToNormal(base.curPanel, 0); // resize new panel, animation time
				base.growBigger(base.curPanel, 0, flag);
				base.updateArrows(base.curPanel);

				// make base container wide enough to contain all the panels
				base.$el.css({
					position : 'absolute',
					// add a bit more width to each box (base.padding *2; then add 1/2 overall width in case only one panel exists)
					width    : (base.curWidth + base.padding * 2) * base.$panels.length + (base.width - base.curWidth) / 2,
					height   : Math.max.apply( this, base.heights ) + 10,
					// add padding so scrollLeft = 0 centers the left-most panel (needed because scrollLeft cannot be < 0)
					'padding-left' : (base.width - base.curWidth) / 2
				});
				base.$window.css({ height : (o.fixedHeight) ? Math.max.apply( this, base.heights ) : base.heights[base.curPanel - base.adj] });
			};

			// Creates the numbered navigation links
			base.buildNav = function() {
				if (base.$nav) {
					base.$nav.find('.mb-links').empty();
				} else {
					base.$nav = $('<div class="mb-controls"><span class="mb-links"></span></div>').appendTo(base.$wrap);
				}
				if (o.buildNav && base.totalPanels > 1) {
					var t, j, a = '', $a;
					base.$panels.filter(':not(.cloned)').each(function(i){
						j = i + 1;
						a = '<a class="mb-link mb-panel' + j + '" href="#"></a>';
						$a = $(a);
						// If a formatter function is present, use it
						if ($.isFunction(o.navFormatter)) {
							t = o.navFormatter(j, $(this));
							if (typeof(t) === "string") {
								$a.html(t);
							} else {
								$a = $('<a/>', t);
							}
						} else {
							$a.html(j);
						}
						$a
							.appendTo(base.$nav.find('.mb-links'))
							.addClass('mb-link mb-panel' + j)
							.data('index', j);
					});
					base.$nav
						.find('a.mb-link').bind('click', function() {
						base.change( $(this).data('index') );
						return false;
					});
				}
			};

			// Resize panels to normal
			base.returnToNormal = function(num, time){
				var panels = base.$panels.not(':eq(' + (num - base.adj) + ')').removeClass(o.currentPanel);
				if (o.reducedSize === 1) {
					panels.css({ width: base.regWidth }); // excluding fontsize change to prevent video flicker
				} else {
					panels.stop(true,false).animate({ width: base.regWidth, fontSize: o.reducedSize + 'em' }, (time === 0) ? 0 : o.speed);
				}
			};

			// Zoom in on selected panel
			base.growBigger = function(num, time, flag){
				var panels = base.$panels.eq(num - base.adj);
				if (o.reducedSize === 1) {
					panels.css({ width: base.curWidth }); // excluding fontsize change to prevent video flicker
					// time delay prevents click outer panel from following links - fixes issue #67
					setTimeout(function(){
						base.completed(num, flag);
					}, (time === 0) ? 0 : o.speed);
				} else {
					panels.stop(true,false).animate({ width: base.curWidth, fontSize: '1em' }, (time === 0) ? 0 : o.speed, function(){
						// completed event trigger
						// even though animation is not queued, trigger is here because it is the last animation to complete
						base.completed(num, flag);
					});
				}
			};

			// instantly center the indicated panel
			base.setWrap = function(panel){
				if (base.totalPanels >= 1) {
					base.growBigger(panel, 0, false);
					var leftValue = base.$panels.eq(panel - base.adj).position().left - (base.width - base.curWidth) / 2 + base.padding;
					base.$window.scrollLeft(leftValue);
				}
			};

			base.completed = function(num, flag){
				// add current panel class after animating in case it has sizing parameters
				var loc = base.$panels.eq(num - base.adj);
				if (!loc.hasClass('cloned')) { loc.addClass(o.currentPanel); }
				if (flag !== false) { base.$el.trigger( 'completed.movingBoxes', [ base, num ] ); }
			};

			// go forward/back
			base.goForward = function(callback){
				if (base.initialized) {
					base.change(base.curPanel + 1, callback);
				}
			};

			base.goBack = function(callback){
				if (base.initialized) {
					base.change(base.curPanel - 1, callback);
				}
			};

			// Change view to display selected panel
			base.change = function(curPanel, callback, flag){

				if (base.totalPanels < 1) {
					if (typeof(callback) === 'function') { callback(base); }
					return;
				}
				var ani, leftValue, wrapped = false;
				flag = flag !== false;

				// check if curPanel is a jQuery selector or object
				// $('' + curPanel) needed because $(3) = [3], but $('3') = []
				if ($('' + curPanel).length || (curPanel instanceof $ && $(curPanel).length)) {
					curPanel = $(curPanel).closest('.mb-panel').index() + base.adj;
				} else {
					// make sure it's a number and not a string
					curPanel = parseInt(curPanel, 10);
				}

				if (base.initialized && flag) {
					// make this moving box active
					if (!base.$wrap.hasClass('mb-active-slider')) { base.active(); }
					// initChange event - has extra parameter with targeted panel (not cleaned)
					base.$el.trigger( 'initChange.movingBoxes', [ base, curPanel ] );
				}

				// Make infinite scrolling work
				if (o.wrap) {
					if (curPanel > base.totalPanels) {
						wrapped = true;
						curPanel = 1;
						base.returnToNormal(0, 0);
						base.setWrap(0);
					} else if (curPanel === 0) {
						wrapped = false;
						curPanel = base.totalPanels;
						base.setWrap(curPanel + 1);
					}
				}

				if ( curPanel < base.adj ) { curPanel = (o.wrap) ? base.totalPanels : 1; }
				if ( curPanel > base.totalPanels - base.adj ) { curPanel = (o.wrap) ? 1 : base.totalPanels; }
				// abort if panel is already animating
				// animation callback needed to clear this flag, but there is no animation before base.initialized is set
				if (base.curPanel !== curPanel && (!base.currentlyMoving || !base.initialized)) {
					// set animation flag; animation callback will clear this flag
					base.currentlyMoving = !o.stopAnimation;

					// center panel in scroll window
					base.$curPanel = base.$panels.eq(curPanel - base.adj);
					leftValue = base.$curPanel.position().left - (base.width - base.curWidth) / 2 + base.padding;
					// when scrolling right, add the difference of the larger current panel width
					if (base.initialized && (curPanel > base.curPanel || wrapped)) { leftValue -= ( base.curWidth - base.regWidth ); }
					ani = (o.fixedHeight) ? { scrollLeft : leftValue } : { scrollLeft: leftValue, height: base.heights[curPanel - base.adj] };
					base.curPanel = curPanel;
					// before animation trigger
					if (base.initialized && flag) { base.$el.trigger( 'beforeAnimation.movingBoxes', [ base, curPanel ] ); }

					if (o.delayBeforeAnimate) {
						// delay starting slide animation
						setTimeout(function(){
							base.animateBoxes(curPanel, ani, flag, callback);
						}, parseInt(o.delayBeforeAnimate, 10) || 0);
					} else {
						base.animateBoxes(curPanel, ani, flag, callback);
					}
				} else {
					base.endAnimation();
				}
			};

			base.animateBoxes = function(curPanel, ani, flag, callback){
				// animate the panels
				base.$window.scrollTop(0).stop(true,false).animate( ani,
					{
						queue    : false,
						duration : o.speed,
						easing   : o.easing,
						complete : function(){
							if (base.initialized) {
								base.$window.scrollTop(0); // Opera fix - otherwise, it moves the focus link to the middle of the viewport
							}
							base.currentlyMoving = false;
							if (typeof(callback) === 'function') { callback(base); }
						}
					}
				);

				base.returnToNormal(curPanel);
				base.growBigger(curPanel, o.speed, flag);
				base.updateArrows(curPanel);
				if (o.hashTags && base.initialized) { base.setHash(curPanel); }
				base.endAnimation();

			};

			base.endAnimation = function(){
				// Update navigation links
				if (o.buildNav && base.$nav.length) {
					base.$nav.find('a.mb-link')
						.removeClass(o.currentPanel)
						.eq(base.curPanel - 1).addClass(o.currentPanel);
				}
			};

			base.updateArrows = function(cur){
				base.$left.toggleClass(o.disabled, (!o.wrap && cur === base.adj) || base.totalPanels <= 1);
				base.$right.toggleClass(o.disabled, (!o.wrap && cur === base.totalPanels) || base.totalPanels <= 1);
			};

			// This method tries to find a hash that matches an ID and slider-X
			// If either found, it tries to find a matching item
			// If that is found as well, then it returns the page number
			base.getHash = function(){
				var h = window.location.hash,
					i = h.indexOf('&'),
					n = h.match(base.regex);
				// test for "/#/" or "/#!/" used by the jquery address plugin - $('#/') breaks jQuery
				if (n === null && !/^#&/.test(h) && !/#!?\//.test(h)) {
					// #quote2&panel1-3&panel3-3
					h = h.substring(0, (i >= 0 ? i : h.length));
					// ensure the element is in the same slider
					n = ($(h).length && $(h).closest('.mb-slider')[0] === base.el) ? $(h).closest('.mb-panel').index() + base.adj : null;
				} else if (n !== null) {
					// #&panel1-3&panel3-3
					n = (o.hashTags) ? parseInt(n[1],10) : null;
				}
				return (n > base.totalPanels) ? null : n;
			};

			// set hash tags
			base.setHash = function(n){
				var s = 'slider' + base.runTime + "=",
					h = window.location.hash;
				if ( typeof h !== 'undefined' ) {
					window.location.hash = (h.indexOf(s) > 0) ? h.replace(base.regex, s + n) : h + "&" + s + n;
				}
			};

			// Make moving box active (for keyboard navigation)
			base.active = function(){
				$('.mb-active-slider').removeClass('mb-active-slider');
				base.$wrap.addClass('mb-active-slider');
			};

			// get: var currentPanel = $('.slider').data('movingBoxes').currentPanel();  // returns # of currently selected/enlarged panel
			// set: var currentPanel = $('.slider').data('movingBoxes').currentPanel(2, function(){ alert('done!'); }); // returns and scrolls to 2nd panel
			base.currentPanel = function(panel, callback){
				if (typeof(panel) !== 'undefined') {
					base.change(panel, callback); // parse in case someone sends a string
				}
				return base.curPanel;
			};

			// based on https://github.com/Mottie/imagesLoaded plugin
			base.imagesLoaded = function(callback, img) {
				var i, ic,
					c = true, // complete flag
					t = img ? $(img) : base.$panels.find('img'),
					l = t.length;
				img = img || []; // array of images that didn't complete
				for ( i = 0; i < l; i++ ) {
					if (t[i].tagName === "IMG") {
						// IE: fileSize property = -1 before image has loaded & if image load error, so if false is returned
						// 10x, then just assume it's an error & call it complete - it's what Firefox & webkit does
						ic = ('fileSize' in t[i] && t[i].fileSize < 0 && t[i].count > 10) ? true : t[i].complete;
						// complete flag, checks previous flag status, complete flag & image height
						// image height may need to be > 20 (or whatever the line-height is) because the alt text is included
						c = (c && ic && t[i].height !== 0); // complete flag
						// save non-complete images for next iteration
						if (ic === false) {
							img.push(t[i]);
							// iteration count for IE
							t[i].count = (t[i].count || 0) + 1;
						}
					}
				}
				if (c) {
					// all complete, run the callback
					if (typeof callback === "function") { callback(); }
				} else {
					// some images not loaded, rinse & repeat
					setTimeout(function(){
						base.imagesLoaded(callback, img);
					}, 200);
				}
			};

			// Run initializer
			base.init();
		};

		$.movingBoxes.defaultOptions = {
			// Appearance
			startPanel   : 1,         // start with this panel
			reducedSize  : 0.8,       // non-current panel size: 80% of panel size
			fixedHeight  : false,     // if true, slider height set to max panel height; if false, slider height will auto adjust.

			// Behaviour
			initAnimation: true,      // if true, movingBoxes will initialize, then animate into the starting slide (if not the first slide)
			stopAnimation: false,     // if true, movingBoxes will force the animation to complete immediately, if the user selects the next panel
			hashTags     : true,      // if true, hash tags are enabled
			wrap         : false,     // if true, the panel will loop through the panels infinitely
			buildNav     : false,     // if true, navigation links will be added
			navFormatter : null,      // function which returns the navigation text for each panel
			easing       : 'swing',   // anything other than "linear" or "swing" requires the easing plugin

			// Times
			speed              : 500, // animation time in milliseconds
			delayBeforeAnimate : 0,   // time to delay in milliseconds before MovingBoxes animates to the selected panel

			// Selectors & classes
			currentPanel : 'current', // current panel class
			tooltipClass : 'tooltip', // added to the navigation, but the title attribute is blank unless the link text-indent is negative
			disabled     : 'disabled',// class added to arrows that are disabled (left arrow when on first panel, right arrow on last panel)

			// Callbacks
			preinit         : null,   // callback after the basic MovingBoxes structure has been built; before "initialized"
			initialized     : null,   // callback when MovingBoxes has completed initialization; all images loaded
			initChange      : null,   // callback upon change panel initialization
			beforeAnimation : null,   // callback before any animation occurs
			completed       : null    // callback after animation completes

			// deprecated options - but still used to keep the plugin backwards compatible
			// and allow resizing the overall width and panel width dynamically (i.e. on window resize)
			// width        : 800,       // overall width of movingBoxes (not including navigation arrows)
			// panelWidth   : 0.5        // current panel width adjusted to 50% of overall width

		};

		
		$.fn.movingBoxes = function(options, callback, flag){
			var mb;
			return this.each(function(){
				mb = $(this).data('movingBoxes');
				// initialize the slider but prevent multiple initializations
				if ((typeof(options)).match('object|undefined')){
					if (mb && options instanceof $ && options.length) {
						// pass a jQuery object to change panels
						mb.change(options, callback, flag);
					} else if (mb) {
						mb.update(callback, flag);
					} else {
						(new $.movingBoxes(this, options));
					}
				} else if (mb) {
					// page #, autoplay, one time callback, if flag is false then no events triggered and animation time = 0
					mb.change(options, callback, flag);
				}
			});
		};

		// Return the movingBoxes object
		$.fn.getMovingBoxes = function(){
			return this.data('movingBoxes');
		};

	})(jQuery);

/***/ }

});